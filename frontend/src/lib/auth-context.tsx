// src/lib/auth-context.tsx
import {
    createContext,
    useContext,
    useState,
    useEffect,
    ReactNode,
} from "react";
import { Role, type User } from "@/lib/types";

interface AuthContextType {
    user: User | null;
    isLoading: boolean;
    login: (loginId: string, password: string) => Promise<User>;
    logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
    const [user, setUser] = useState<User | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    // ‚ë† ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏÑ∏ÏÖò Îì§Í≥† Ïò§Í∏∞
    useEffect(() => {
        console.log("üîç fetchSession start")
        async function fetchSession() {
            try {
                const res = await fetch(
                    `/api/member/session`,
                    {
                        method: "GET",
                        credentials: "include",   // Ïø†ÌÇ§(JSESSIONID)Î•º Î≥¥ÎÇ¥Î†§Î©¥ ÌïÑÏàò
                    }
                );
                if (res.ok) {
                    const sessionUser = (await res.json()) as User;
                    setUser(sessionUser);
                    console.log("üîç fetchSession end", sessionUser);  // ‚Üê Ïó¨Í∏∞
                }
            } catch (err) {
                console.error("ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ Ïã§Ìå®", err);
            } finally {
                setIsLoading(false);
            }
        }
        fetchSession();
    }, []);

    // ‚ë° Î°úÍ∑∏Ïù∏ Ìï®ÏàòÏóêÎèÑ credentials Ìè¨Ìï®
    const login = async (loginId: string, password: string) => {
        const res = await fetch(
            `/api/member/login`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ loginId, password }),
            }
        );
        if (!res.ok) {
            const err = await res.json().catch(() => ({} as any));
            throw new Error(err.message || `Î°úÍ∑∏Ïù∏ Ïã§Ìå® (${res.status})`);
        }
        const loggedUser = (await res.json()) as User;
        console.log("ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ role:", loggedUser.role, typeof loggedUser.role);
        setUser(loggedUser);
        return loggedUser;
    };

    // ‚ë¢ Î°úÍ∑∏ÏïÑÏõÉ Ïãú ÏÑ∏ÏÖò Ï†úÍ±∞
    const logout = async () => {
        await fetch(
            `/api/member/logout`,
            {
                method: "POST",
                credentials: "include",
            }
        );
        setUser(null);
    };

    return (
        <AuthContext.Provider value={{ user, isLoading, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
}

export function useAuth() {
    const ctx = useContext(AuthContext);
    if (!ctx) throw new Error("AuthProviderÎ°ú Í∞êÏã∏Ï£ºÏÑ∏Ïöî");
    return ctx;
}