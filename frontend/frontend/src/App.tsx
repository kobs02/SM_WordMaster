import React, { useState, useEffect } from 'react';
import axios from 'axios';
import "./App.css"; // üëà ÏïÑÎûòÏóê Ï†ïÏùòÎêú CSS Î∂àÎü¨Ïò§Í∏∞

interface Word {
    id: number;
    spelling: string;
    mean: string;
    level: string;
}

const App: React.FC = () => {
    const [words, setWords] = useState<Word[]>([]);
    const [newWord, setNewWord] = useState<Word>({ id: 0, spelling: '', mean: '', level: 'A1' });
    const [editWord, setEditWord] = useState<Word | null>(null);

    useEffect(() => {
        axios.get('http://localhost:7777/api/words')
            .then((response) => {
                setWords(response.data);
            })
            .catch((error) => {
                console.error('Îã®Ïñ¥ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
            });
    }, []);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setNewWord({ ...newWord, [name]: value });
    };

    // Îã®Ïñ¥ Ï∂îÍ∞Ä ÏöîÏ≤≠ Ï≤òÎ¶¨
    const handleAddWord = (e: React.FormEvent) => {
        e.preventDefault();
        const isDuplicate = words.some(word => word.spelling === newWord.spelling);
        if (isDuplicate) {
            alert("‚ö†Ô∏è Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Îã®Ïñ¥ÏûÖÎãàÎã§.");
            return;
        }
        // newWordÏóêÏÑú idÎ•º Ï†úÏô∏Ìïú Í∞ùÏ≤¥Îßå ÏÉùÏÑ±
        const { spelling, mean, level } = newWord;

        axios.post('http://localhost:7777/api/words', { spelling, mean, level })
            .then((response) => {
                setWords([...words, response.data]); // Î™©Î°ùÏóê Ï∂îÍ∞Ä
                setNewWord({ id: 0, spelling: '', mean: '', level: 'A1' }); // ÏûÖÎ†•Í∞í Ï¥àÍ∏∞Ìôî
            })
            .catch((error) => {
                console.error('Îã®Ïñ¥ Ï∂îÍ∞Ä Ïã§Ìå®:', error);
                alert('Îã®Ïñ¥ Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            });
    };

    // Îã®Ïñ¥ ÏÇ≠Ï†ú ÏöîÏ≤≠ Ï≤òÎ¶¨
    const handleDelete = (id: number) => {
        if (!id || id === 0) {
            alert("ÏûòÎ™ªÎêú IDÏûÖÎãàÎã§. ÏÇ≠Ï†úÌï† Ïàò ÏóÜÏäµÎãàÎã§.");
            return;
        }

        const confirmDelete = window.confirm("Ï†ïÎßêÎ°ú Ïù¥ Îã®Ïñ¥Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (!confirmDelete) return;

        axios.delete(`http://localhost:7777/api/words/${id}`)
            .then(() => {
                setWords(words.filter(word => word.id !== id));
            })
            .catch((error) => {
                console.error('Îã®Ïñ¥ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
                alert("Îã®Ïñ¥ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÏ°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ìï≠Î™©Ïùº ÏàòÎèÑ ÏûàÏäµÎãàÎã§.");
            });
    };


    // Îã®Ïñ¥ ÏàòÏ†ï Î∂àÎü¨Ïò§Í∏∞ Ï≤òÎ¶¨
    const handleEdit = (word: Word) => {
        if (!word || !word.id) {
            alert("ÏàòÏ†ïÌï† Îã®Ïñ¥ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
            return;
        }
        // ÍπäÏùÄ Î≥µÏÇ¨Î°ú ÏÉÅÌÉú Ïò§Ïóº Î∞©ÏßÄ (Î∂àÎ≥ÄÏÑ± Ïú†ÏßÄ)
        const wordCopy: Word = { ...word };
        setEditWord(wordCopy);
    };


    //Îã®Ïñ¥ ÏàòÏ†ï ÏöîÏ≤≠ Ï≤òÎ¶¨
    const handleUpdate = (e: React.FormEvent) => {
        e.preventDefault();
        if (editWord) {
            axios.put(`http://localhost:7777/api/words/${editWord.id}`, editWord)
                .then((response) => {
                    setWords(words.map(word => word.id === editWord.id ? response.data : word));
                    setEditWord(null);
                })
                .catch((error) => {
                    console.error('Îã®Ïñ¥ ÏàòÏ†ï Ïã§Ìå®:', error);
                });
        }
    };


    //ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
    const [currentPage, setCurrentPage] = useState(1);
    const wordsPerPage = 20;

// ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò Îã®Ïñ¥Îì§Îßå Ï∂îÏ∂ú
    const indexOfLastWord = currentPage * wordsPerPage;
    const indexOfFirstWord = indexOfLastWord - wordsPerPage;
    const currentWords = words.slice(indexOfFirstWord, indexOfLastWord);

// Ï¥ù ÌéòÏù¥ÏßÄ Ïàò
    const totalPages = Math.ceil(words.length / wordsPerPage);

// ÌéòÏù¥ÏßÄ Ïù¥Îèô Ìï∏Îì§Îü¨
    const goToPage = (pageNumber: number) => {
        if (pageNumber >= 1 && pageNumber <= totalPages) {
            setCurrentPage(pageNumber);
        }
    };

    const goToFirstPage = () => setCurrentPage(1);
    const goToLastPage = () => setCurrentPage(totalPages);
    const getPageNumbers = () => {
        const delta = 2; // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Í∏∞Ï§Ä ÏïûÎí§ 2Í∞ú
        const pages = [];

        const startPage = Math.max(1, currentPage - delta);
        const endPage = Math.min(totalPages, currentPage + delta);

        if (startPage > 1) {
            pages.push(1);
            if (startPage > 2) pages.push("...");
        }

        for (let i = startPage; i <= endPage; i++) {
            pages.push(i);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) pages.push("...");
            pages.push(totalPages);
        }

        return pages;
    };


    return (
        <div className="container">
            <h1 className="title">üìò Îã®Ïñ¥Ïû• Î™©Î°ù</h1>

            <table className="word-table">
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Îã®Ïñ¥</th>
                    <th>Îúª</th>
                    <th>Î†àÎ≤®</th>
                    <th>ÏàòÏ†ï</th>
                    <th>ÏÇ≠Ï†ú</th>
                </tr>
                </thead>
                <tbody>
                {currentWords.map((word) => (
                    <tr key={word.id}>
                        <td>{word.id}</td>
                        <td>{word.spelling}</td>
                        <td>{word.mean}</td>
                        <td>{word.level}</td>
                        <td>
                            <button className="edit-btn" onClick={() => handleEdit(word)}>ÏàòÏ†ï</button>
                        </td>
                        <td>
                            <button className="delete-btn" onClick={() => handleDelete(word.id)}>ÏÇ≠Ï†ú</button>
                        </td>
                    </tr>
                ))}
                </tbody>

            </table>
            <div className="pagination">
                <button onClick={goToFirstPage} disabled={currentPage === 1}>‚èÆ Îß® Ï≤òÏùå</button>
                <button onClick={() => goToPage(currentPage - 1)} disabled={currentPage === 1}>‚óÄ Ïù¥Ï†Ñ</button>

                {/* Ïà´Ïûê ÌéòÏù¥ÏßÄ Î≤ÑÌäºÎì§ */}
                {getPageNumbers().map((page, index) => (
                    typeof page === "number" ? (
                        <button
                            key={index}
                            className={`page-number ${currentPage === page ? "active" : ""}`}
                            onClick={() => goToPage(page)}
                        >
                            {page}
                        </button>
                    ) : (
                        <span key={index} className="dots">...</span>
                    )
                ))}

                <button onClick={() => goToPage(currentPage + 1)} disabled={currentPage === totalPages}>Îã§Ïùå ‚ñ∂</button>
                <button onClick={goToLastPage} disabled={currentPage === totalPages}>Îß® ÎÅù ‚è≠</button>
            </div>




            <h2 className="subtitle">‚ûï Îã®Ïñ¥ Ï∂îÍ∞Ä</h2>
            <form onSubmit={handleAddWord} className="form">
                <label>
                    Îã®Ïñ¥:
                    <input type="text" name="spelling" value={newWord.spelling} onChange={handleInputChange} required />
                </label>
                <label>
                    Îúª:
                    <input type="text" name="mean" value={newWord.mean} onChange={handleInputChange} required />
                </label>
                <label>
                    Î†àÎ≤®:
                    <select name="level" value={newWord.level} onChange={handleInputChange}>
                        <option value="A1">A1</option>
                        <option value="A2">A2</option>
                        <option value="B1">B1</option>
                        <option value="B2">B2</option>
                        <option value="C1">C1</option>
                        <option value="C2">C2</option>
                    </select>
                </label>
                <button type="submit" className="add-btn">Ï∂îÍ∞Ä</button>
            </form>

            {editWord && (
                <>
                    <h2 className="subtitle">‚úèÔ∏è Îã®Ïñ¥ ÏàòÏ†ï</h2>
                    <form onSubmit={handleUpdate} className="form">
                        <label>
                            Îã®Ïñ¥:
                            <input type="text" name="spelling" value={editWord.spelling} onChange={(e) => setEditWord({ ...editWord, spelling: e.target.value })} required />
                        </label>
                        <label>
                            Îúª:
                            <input type="text" name="mean" value={editWord.mean} onChange={(e) => setEditWord({ ...editWord, mean: e.target.value })} required />
                        </label>
                        <label>
                            Î†àÎ≤®:
                            <select name="level" value={editWord.level} onChange={(e) => setEditWord({ ...editWord, level: e.target.value })}>
                                <option value="A1">A1</option>
                                <option value="A2">A2</option>
                                <option value="B1">B1</option>
                                <option value="B2">B2</option>
                                <option value="C1">C1</option>
                                <option value="C2">C2</option>
                            </select>
                        </label>
                        <button type="submit" className="edit-btn">ÏàòÏ†ï ÏôÑÎ£å</button>
                    </form>
                </>
            )}
        </div>
    );
};
export default App;